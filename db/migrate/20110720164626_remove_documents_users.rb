class RemoveDocumentsUsers < ActiveRecord::Migration
  def self.up
    #1 - Remove documents_users table
  	drop_table :documents_users
  	#What about all of the data that was in here?
  	
  	#2 - Add a column to the userships table to indicate ownership
  	add_column :userships, :owner, :boolean
  	
  	#3 - Loop through all documents, creating a usership for each and populating
  	#    with the appropriate owner, document, and ownership status
  	Document.all.each do |doc|
    	Usership.create(:document_id => doc.id,
    					:user_id => doc.user_id,
    					:owner => true)
    					#What about shared docs?
    end 
    
    #4 - Removes the user_id column from the documents table (now stored in userships)
    remove_column :documents, :user_id  
        
  end

  def self.down
    #1 - Create documents_users tables and add columns + index
    create_table :documents_users, :id => false do |t|
      t.column :document_id, :integer
      t.column :user_id, :integer
    end
    add_index(:documents_users, [:document_id, :user_id], :unique => true)
    
    Usership.all.each do |usership|
    	@doc_user = Documents_user.new
    	@doc_user.document_id = usership.document_id
    	@doc_user.user_id = usership.user_id
    	@doc_user.save
    	
    	#Documents_users.create(:document_id => usership.document_id,
    	#					 :user_id => user_id)
    end
    #Repopulate the data

    #4 - Adds the column for user_id back into the documents table then loops through the 
    #    ownership table, restoring user_id to the documents
    add_column :documents, :user_id, :integer
    Usership.all.each do |usership|
    	usership.document.update_attribute(:user_id, usership.user_id)
    end  
    
    #3 - Deletes all of the userships that were generated by looping through 
    #    the documents table
    Usership.delete_all
    
    #2 - Remove the column indicating ownership from the usership table
    remove_column :userships, :owner
    
  end
end